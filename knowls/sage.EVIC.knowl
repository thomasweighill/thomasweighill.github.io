<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-EVIC', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">EVIC</span> <span class="titletext">Exact Versus Inexact Computations</span>
</h5>


<p>We are now at a crossroads in our use of Sage.  So far our computations have involved rational numbers: fractions of two integers.  Sage is able to work with integers of seemingly unlimited size, and then can work with rational numbers exactly.  So all of our computations have been exactly correct so far.  In practice, many computations, especially those that originate with data, are not so precise.  Then we <em>represent</em> real numbers by “floating point numbers.”  Since the real numbers are infinite, finite computers must fake it with an extremely large, but still finite, collection of numbers.  The price we pay is that some computations will be just slightly imprecise when there is no number available that represents the exact answer.</p>

<p>You should now appreciate two problems that occur.  If we were to row-reduce a matrix with floating point numbers, there are potentially many computations and if a small amount of imprecision arises in each one, these errors can accumulate and lead to wildly incorrect answers.  When we row-reduce a matrix, whether or not an entry is zero or not is critically important in the decisions we make about which row operation to perform.  If we have an extremely small number (like $10^{-16}$) how can we be sure if it is zero or not?</p>

<p>Why discuss this now?  What is $\alpha=\sqrt{\frac{7}{3}}$?  Hard to say exactly, but it is definitely not a rational number.  Norms of vectors will feature prominently in all our discussions about orthogonal vectors, so we now have to recognize the need to work with square roots properly.  We have two strategies in Sage.</p>

<p>The number system <span class="code">QQbar</span>, also known as the “field of algebraic numbers,” is a truly amazing feature of Sage.  It contains the rational numbers, plus <em>every</em> root of <em>every</em> polynomial with coefficients that are rational numbers.  For example, notice that $\alpha$ above is one solution to the polynomial equation $3x^2-7=0$ and thus is a number in <span class="code">QQbar</span>, so Sage can work with it <em>exactly</em>.  These numbers are called “algebraic numbers” and you can recognize them since they print with a question mark near the end to remind you that when printed as a decimal they are approximations of numbers that Sage carries internally as exact quantities.  For example $\alpha$ can be created with <span class="code">QQbar(sqrt(7/3))</span> and will print as <span class="code">1.527525231651947</span>?.  Notice that complex numbers begin with the introduction of the imaginary number $i$, which is a root of the polynomial equation $x^2+1=0$, so the field of algebraic numbers contains many complex numbers.  The downside of <span class="code">QQbar</span> is that computations are slow (relatively speaking), so this number system is most useful for examples and demonstrations.</p>

<p>The other strategy is to work strictly with approximate numbers, cognizant of the potential for inaccuracies.  Sage has two such number systems: <span class="code">RDF</span> and <span class="code">CDF</span>, which are comprised of “double precision” floating point numbers, first limited to just the reals, then expanded to the complexes.  Double-precision refers to the use of 64 bits to store the sign, mantissa and exponent in the representation of a real number.  This gives 53 bits of precision.  Do not confuse these fields with <span class="code">RR</span> and <span class="code">CC</span>, which are similar in appearance but very different in implementation.  Sage has implementations of several computations designed exclusively for <span class="code">RDF</span> and <span class="code">CDF</span>, such as the norm.  And they are very, very fast.  But some computations, like echelon form, can be wildly unreliable with these approximate numbers.  We will have more to say about this as we go.  In practice, you can use <span class="code">CDF</span>, since <span class="code">RDF</span> is a subset and only different in very limited cases.</p>

<p>In summary, <span class="code">QQbar</span> is an extension of <span class="code">QQ</span> which allows exact computations, but can be slow for large examples.  <span class="code">RDF</span> and <span class="code">CDF</span> are fast, with special algorithms to control much of the imprecision in some, but not all, computations.  So we need to be vigilant and skeptical when we work with these approximate numbers.  We will use both strategies, as appropriate.</p>

<br><br><div class="sage-EVIC sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

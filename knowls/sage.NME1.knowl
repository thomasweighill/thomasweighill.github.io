<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-NME1', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">NME1</span> <span class="titletext">Nonsingular Matrix Equivalences, Round 1</span>
</h5>


<p>Sage will create random matrices and vectors, sometimes with various properties.  These can be very useful for quick experiments, and they are also useful for <em>illustrating</em> that theorems hold for any object satisfying the hypotheses of the theorem.  But this will never replace a proof.</p>

<p>We will illustrate <a class="knowl" acro="NME1" type="Theorem" title="Nonsingular Matrix Equivalences, Round 1" knowl="./knowls/theorem.NME1.knowl">Theorem NME1</a> using Sage.  We will use a variant of the <span class="code">random_matrix()</span> constructor that uses the <span class="code">algorithm='unimodular'</span> keyword.  We will have to wait for <a href="chapter-D.html" title="Determinants">Chapter D</a> before we can give a full explanation, but for now, understand that this command will <em>always</em> create a square matrix that is nonsingular.  Also realize that there are square nonsingular matrices which will never be the output of this command.  In other words, this command creates elements of just a subset of all possible nonsingular matrices.</p>

<p>So we are using random matrices below to illustrate properties predicted by <a class="knowl" acro="NME1" type="Theorem" title="Nonsingular Matrix Equivalences, Round 1" knowl="./knowls/theorem.NME1.knowl">Theorem NME1</a>.  Execute the first command to create a random nonsingular matrix, and notice that we only have to mark the output of <span class="code">A</span> as random for our automated testing process.  After a few runs, notice that you can also edit the value of <span class="code">n</span> to create matrices of different sizes.  With a matrix <span class="code">A</span> defined, run the next three cells, which by <a class="knowl" acro="NME1" type="Theorem" title="Nonsingular Matrix Equivalences, Round 1" knowl="./knowls/theorem.NME1.knowl">Theorem NME1</a> each always produce <span class="code">True</span> as their output, <em>no matter what value</em> <span class="code">A</span> <em>has</em>, so long as <span class="code">A</span> is nonsingular.  Read the code and try to determine exactly how they correspond to the parts of the theorem (some commentary along these lines follows).</p>

<br><br><div class="sage-NME1"><script type="text/x-sage">n = 6
A = random_matrix(QQ, n, algorithm='unimodular')
A               # random
</script></div>

<br><br><div class="sage-NME1"><script type="text/x-sage">A.rref() == identity_matrix(QQ, n)
</script></div>

<br><br><div class="sage-NME1"><script type="text/x-sage">nsp = A.right_kernel(basis='pivot')
nsp.list() == [zero_vector(QQ, n)]
</script></div>

<br><br><div class="sage-NME1"><script type="text/x-sage">b = random_vector(QQ, n)
aug = A.augment(b)
aug.pivots() == tuple(range(n))
</script></div>

<p>The only portion of these commands that may be unfamilar is the last one.  The command <span class="code">range(n)</span> is incredibly useful, as it will create a list of the integers from <span class="code">0</span> up to, <em>but not including</em>, <span class="code">n</span>.  (We saw this command briefly in <a class="knowl" acro="FDV" type="Sage" title="" knowl="./knowls/sage.FDV.knowl">Sage FDV</a>.)  So, for example, <span class="code">range(3) == [0,1,2]</span> is <span class="code">True</span>.  Pivots are returned as a “tuple” which is very much like a list, except we cannot change the contents.  We can see the difference by the way the tuple prints with parentheses (<span class="code">(,)</span>) rather than brackets (<span class="code">[,]</span>).  We can convert a list to a tuple with the <span class="code">tuple()</span> command, in order to make the comparison succeed.</p>

<p>How do we tell if the reduced row-echelon form of the augmented matrix of a system of equations represents a system with a unique solution?  First, the system must be consistent, which by <a class="knowl" acro="RCLS" type="Theorem" title="Recognizing Consistency of a Linear System" knowl="./knowls/theorem.RCLS.knowl">Theorem RCLS</a> means the last column is not a pivot column.  Then with a consistent system we need to insure there are no free variables.  This happens if and only if the remaining columns are all pivot columns, according to <a class="knowl" acro="FVCS" type="Theorem" title="Free Variables for Consistent Systems" knowl="./knowls/theorem.FVCS.knowl">Theorem FVCS</a>, thus the test used in the last compute cell.</p>

<br><br><div class="sage-NME1 sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

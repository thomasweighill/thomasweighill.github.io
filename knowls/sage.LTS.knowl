<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-LTS', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">LTS</span> <span class="titletext">Linear Transformations, Symbolic</span>
</h5>


<p>There are several ways to create a linear transformation in Sage, and many natural operations on these objects are possible.  As previously, rather than use the complex numbers as our number system, we will instead use the rational numbers, since Sage can model them exactly.  We will also use the following transformation repeatedly for examples, when no special properties are required:
\begin{align*}
&amp;\ltdefn{T}{\complex{3}}{\complex{4}}\\
&amp;\lt{T}{\colvector{x_1\\x_2\\x_3}}=\colvector{-x_1 + 2x_3\\x_1 + 3x_2 + 7x_3\\x_1 + x_2 + x_3\\2x_1 + 3x_2 + 5x_3}
\end{align*}

To create this linear transformation in Sage, we first create a “symbolic” function, which requires that we also first define some symbolic variables which are <span class="code">x1</span>, <span class="code">x2</span> and <span class="code">x3</span> in this case.  (You can bypass the intermediate variable <span class="code">outputs</span> in your own work.  We will use it consistently to allow us to spread the definition across several lines without the Sage preparser getting in the way.  In other words, it is safe to combine the the two lines below and not use <span class="code">outputs</span>.)</p>

<br><br><div class="sage-LTS"><script type="text/x-sage">x1, x2, x3 = var('x1, x2, x3')
outputs = [ -x1        + 2*x3,
             x1 + 3*x2 + 7*x3,
             x1 +   x2 +   x3,
           2*x1 + 3*x2 + 5*x3]
T_symbolic(x1, x2, x3) = outputs

</script></div>

<p>You can experiment with <span class="code">T_symbolic</span>, evaluating it at triples of rational numbers, and perhaps doing things like calculating its partial derivatives.  We will use it as input to the <span class="code">linear_transformation()</span> constructor.  We just need to specify carefully the domain and codomain, now as vector spaces over the rationals rather than the complex numbers.</p>

<br><br><div class="sage-LTS"><script type="text/x-sage">T = linear_transformation(QQ^3, QQ^4, T_symbolic)
</script></div>

<p>You can now, of course, experiment with <span class="code">T</span> via tab-completion, but we will explain the various properties of Sage linear transformations as we work through this chapter.  Even some seemingly simple operations, such as printing <span class="code">T</span> will require some explanation.  But for starters, we can evaluate <span class="code">T</span>.</p>

<br><br><div class="sage-LTS"><script type="text/x-sage">u = vector(QQ, [3, -1, 2])
w = T(u)
w
</script></div>

<br><br><div class="sage-LTS"><script type="text/x-sage">w.parent()
</script></div>

<p>Here is a small verification of <a class="knowl" acro="LTTZZ" type="Theorem" title="Linear Transformations Take Zero to Zero" knowl="./knowls/theorem.LTTZZ.knowl">Theorem LTTZZ</a>.</p>

<br><br><div class="sage-LTS"><script type="text/x-sage">zero_in = zero_vector(QQ, 3)
zero_out = zero_vector(QQ, 4)
T(zero_in) == zero_out
</script></div>

<p>Note that Sage will recognize some symbolic functions as not being linear transformations (in other words, inconsistent with <a class="knowl" acro="LT" type="Definition" title="Linear Transformation" knowl="./knowls/definition.LT.knowl">Definition LT</a>), but this detection is fairly easy to fool.  We will see some safer ways to create a linear transformation shortly.</p>

<br><br><div class="sage-LTS sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-RO', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">RO</span> <span class="titletext">Row Operations</span>
</h5>


<p>Sage will perform individual row operations on a matrix.  This can get a bit tedious, but it is better than doing the computations (wrong, perhaps) by hand, and it can be useful when building up more complicated procedures for a matrix.</p>

<p>For each row operation, there are two similar methods.  One changes the matrix “in-place” while the other creates a new matrix that is a modified version of the original.  This is an important distinction that you should understand for every new Sage command you learn that might change a matrix or vector.</p>

<p>Consider the first row operation, which swaps two rows.  There are two matrix methods to do this, a “with” version that will create a new, changed matrix, which you will likely want to save, and a plain version that will change the matrix it operates on “in-place.”.  The <span class="code">copy()</span> function, which is a general-purpose command, is a way to make a copy of a matrix before you make changes to it.  Study the example below carefully, and then read the explanation following. (Remember that counting begins with zero.)</p>

<br><br><div class="sage-RO"><script type="text/x-sage">A = matrix(QQ,2,3,[1,2,3,4,5,6])
B = A
C = copy(A)
D = A.with_swapped_rows(0,1)
D[0,0] = -1
A.swap_rows(0,1)
A[1,2] = -6
A
</script></div>

<br><br><div class="sage-RO"><script type="text/x-sage">B
</script></div>

<br><br><div class="sage-RO"><script type="text/x-sage">C
</script></div>

<br><br><div class="sage-RO"><script type="text/x-sage">D
</script></div>

<p>Here is how each of these four matrices comes into existence.</p>

<ol>
<li> <span class="code">A</span> is our original matrix, created from a list of entries.
</li>
<li> <span class="code">B</span> is not a new copy of <span class="code">A</span>, it is just a new name for referencing the exact same matrix internally.
</li>
<li> <span class="code">C</span> is a brand new matrix, stored internally separate from <span class="code">A</span>, but with identical contents.
</li>
<li> <span class="code">D</span> is also a new matrix, which is created by swapping the rows of <span class="code">A</span>
</li>
</ol>

<p>And here is how each matrix is affected by the commands.</p>

<ol>
<li> <span class="code">A</span> is changed twice “in-place”.  First, its rows are swapped rows a “plain” matrix method.  Then its entry in the lower-right corner is set to <span class="code">-6</span>.
</li>
<li> <span class="code">B</span> is just another name for <span class="code">A</span>.  So whatever changes are made to <span class="code">A</span> will be evident when we ask for the matrix by the name <span class="code">B</span>.  And vice-versa.
</li>
<li> <span class="code">C</span> is a copy of the original <span class="code">A</span> and does not change, since no subsequent commands act on <span class="code">C</span>.
</li>
<li> <span class="code">D</span> is a new copy of <span class="code">A</span>, created by swapping the rows of <span class="code">A</span>.  Once created from <span class="code">A</span>, it has a life of its own, as illustrated by the change in its entry in the upper-left corner to <span class="code">-1</span>.
</li>
</ol>

<p>An interesting experiment is to rearrange some of the lines above (or add new ones) and predict the result.</p>

<p>Just as with the first row operation, swapping rows, Sage supports the other two row operations with natural sounding commands, with both “in-place” versions and new-matrix versions.</p>

<br><br><div class="sage-RO"><script type="text/x-sage">A = matrix(QQ, 3, 4, [[1,  2,  3,  4],
                      [5,  6,  7,  8],
                      [9, 10, 11, 12]])
B = copy(A)
A.rescale_row(1, 1/2)
A
</script></div>

<br><br><div class="sage-RO"><script type="text/x-sage">A.add_multiple_of_row(2, 0, 10)
A
</script></div>

<br><br><div class="sage-RO"><script type="text/x-sage">B.with_rescaled_row(1, 1/2)
</script></div>

<br><br><div class="sage-RO"><script type="text/x-sage">C = B.with_added_multiple_of_row(2, 0, 10)
C
</script></div>

<p>Notice that the order of the arguments might feel a bit odd, compared to how we write and think about row operations.  Also note how the “with” versions leave a trail of matrices for each step while the plain versions just keep changing <span class="code">A</span>.</p>

<br><br><div class="sage-RO sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

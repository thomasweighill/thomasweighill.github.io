<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-ANC', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">ANC</span> <span class="titletext">A Note on Coercion</span>
</h5>


<p>Study the following sequence of commands, while cognizant of the failure to specify a number system for <span class="code">x</span>.</p>

<br><br><div class="sage-ANC"><script type="text/x-sage">x = vector([1, 2, 3])
u = 3*x
u
</script></div>

<br><br><div class="sage-ANC"><script type="text/x-sage">v = (1/3)*x
v
</script></div>

<br><br><div class="sage-ANC"><script type="text/x-sage">y = vector(QQ, [4, 5, 6])
w = 8*y
w
</script></div>

<br><br><div class="sage-ANC"><script type="text/x-sage">z = x + y
z
</script></div>

<p>None of this should be too much of a surprise, and the results should be what we would have expected.  Though for <span class="code">x</span> we never specified if <span class="code">1, 2, 3</span> are integers, rationals, reals, complexes, or …?  Let us dig a little deeper and examine the parents of the five vectors involved.</p>

<br><br><div class="sage-ANC"><script type="text/x-sage">x.parent()
</script></div>

<br><br><div class="sage-ANC"><script type="text/x-sage">u.parent()
</script></div>

<br><br><div class="sage-ANC"><script type="text/x-sage">v.parent()
</script></div>

<br><br><div class="sage-ANC"><script type="text/x-sage">y.parent()
</script></div>

<br><br><div class="sage-ANC"><script type="text/x-sage">w.parent()
</script></div>

<br><br><div class="sage-ANC"><script type="text/x-sage">z.parent()
</script></div>

<p>So <span class="code">x</span> and <span class="code">u</span> belong to something called an “ambient free module,” whatever that is.  What is important here is that the parent of <span class="code">x</span> uses the integers as its number system.  How about <span class="code">u</span>, <span class="code">v</span>, <span class="code">y</span>, <span class="code">w</span>, <span class="code">z</span>?  All but the first has a parent that uses the rationals for its number system.</p>

<p>Three of the final four vectors are examples of a process that Sage calls “coercion.”  Mathematical elements get converted to a new parent, as necessary, when the conversion is totally unambiguous.  In the examples above:</p>

<ul>
<li> <span class="code">u</span> is the result of scalar multiplication by an integer, so the computation and result can all be accommodated within the integers as the number system.
</li>
<li> <span class="code">v</span> involves scalar multiplication by a scalar that is not an integer, and which could be construed as a rational number.  So the result needs to have a parent whose number system is the rationals.
</li>
<li> <span class="code">y</span> is created <em>explicitly</em> as a vector whose entries are rational numbers.
</li>
<li> Even though <span class="code">w</span> is created only with products of integers, the fact that <span class="code">y</span> has entries considered as rational numbers, so too does the result.
</li>
<li> The creation of <span class="code">z</span> is the result of adding a vector of integers to a vector of rationals.  This is the best example of coercion — Sage promotes <span class="code">x</span> to a vector of rationals and therefore returns a result that is a vector of rationals.  Notice that there is no ambiguity and no argument about how to promote <span class="code">x</span>, and the same would be true for any vector full of integers.
</li>
</ul>

<p>The coercion above is automatic, but we can also usually force it to happen without employing an operation.</p>

<br><br><div class="sage-ANC"><script type="text/x-sage">t = vector([10, 20, 30])
t.parent()
</script></div>

<br><br><div class="sage-ANC"><script type="text/x-sage">V = QQ^3
t_rational = V(t)
t_rational
</script></div>

<br><br><div class="sage-ANC"><script type="text/x-sage">t_rational.parent()
</script></div>

<br><br><div class="sage-ANC"><script type="text/x-sage">W = CC^3
t_complex = W(t)
t_complex
</script></div>

<br><br><div class="sage-ANC"><script type="text/x-sage">t_complex.parent()
</script></div>

<p>So the syntax is to use the name of the parent like a function and <em>coerce</em> the element into the new parent.  This can fail if there is no natural way to make the conversion.</p>

<br><br><div class="sage-ANC"><script type="text/x-sage">u = vector(CC, [5*I, 4-I])
u
</script></div>

<br><br><div class="sage-ANC"><script type="text/x-sage">V = QQ^2
V(u)
</script></div>

<p>Coercion is one of the more mysterious aspects of Sage, and the above discussion may not be very clear the first time though.  But if you get an error (like the one above) talking about coercion, you know to come back here and have another read through.  For now, be sure to create all your vectors and matrices over <span class="code">QQ</span> and you should not have any difficulties.</p>

<br><br><div class="sage-ANC sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

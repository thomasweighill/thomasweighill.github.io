<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-PI', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">PI</span> <span class="titletext">Pre-Images</span>
</h5>


<p>Sage handles pre-images just a bit differently than our approach in the text.  For the moment, we can obtain a single vector in the set that is the pre-image via the <span class="code">.preimage_representative()</span> method.  Understand that this method will return <em>just one</em> element of the pre-image set, and we have no real control over which one.  Also, it is certainly possible that a pre-image is the empty set â€” in this case, the method will raise a <span class="code">ValueError</span>.  We will use our running example to illustrate.</p>

<br><br><div class="sage-PI"><script type="text/x-sage">A = matrix(QQ, [[-1, 0, 2],
                [ 1, 3, 7],
                [ 1, 1, 1],
                [ 2, 3, 5]])
T = linear_transformation(QQ^3, QQ^4, A, side='right')
v = vector(QQ, [1, 2, 0, 1])
u = T.preimage_representative(v)
u
</script></div>

<br><br><div class="sage-PI"><script type="text/x-sage">T(u) == v
</script></div>

<br><br><div class="sage-PI"><script type="text/x-sage">T.preimage_representative(vector(QQ, [1, 2, 1, 1]))
</script></div>

<p>Remember, we have defined the pre-image as a set, and Sage just gives us a single element of the set.  We will see in <a class="knowl" acro="ILT" type="Sage" title="" knowl="./knowls/sage.ILT.knowl">Sage ILT</a> that the upcoming <a class="knowl" acro="KPI" type="Theorem" title="Kernel and Pre-Image" knowl="./knowls/theorem.KPI.knowl">Theorem KPI</a> explains why this is no great shortcoming in Sage.</p>

<br><br><div class="sage-PI sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

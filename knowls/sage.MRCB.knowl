<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-MRCB', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">MRCB</span> <span class="titletext">Matrix Representation and Change-of-Basis</span>
</h5>


<p>In <a class="knowl" acro="MR" type="Sage" title="" knowl="./knowls/sage.MR.knowl">Sage MR</a> we built two matrix representations of one linear transformation, relative to two different pairs of bases.  We now understand how these two matrix representations are related — <a class="knowl" acro="MRCB" type="Theorem" title="Matrix Representation and Change of Basis" knowl="./knowls/theorem.MRCB.knowl">Theorem MRCB</a> gives the precise relationship with change-of-basis matrices, one converting vector representations on the domain, the other converting vector representations on the codomain.  Here is the demonstration.  We use <span class="code">MT</span> as the prefix of names for matrix representations, <span class="code">CB</span> as the prefix for change-of-basis matrices, and numerals to distinguish the two domain-codomain pairs.</p>

<br><br><div class="sage-MRCB"><script type="text/x-sage">x1, x2, x3, x4 = var('x1, x2, x3, x4')
outputs = [3*x1 + 7*x2 + x3 - 4*x4,
           2*x1 + 5*x2 + x3 - 3*x4,
            -x1 - 2*x2      +   x4]
T_symbolic(x1, x2, x3, x4) = outputs
U = QQ^4
V = QQ^3
b0 = vector(QQ, [ 1, 1, -1, 0])
b1 = vector(QQ, [-1, 0, -2, 7])
b2 = vector(QQ, [ 0, 1, -2, 4])
b3 = vector(QQ, [-2, 0, -1, 6])
B = [b0, b1, b2, b3]
c0 = vector(QQ, [ 1,  6, -6])
c1 = vector(QQ, [ 0,  1, -1])
c2 = vector(QQ, [-2, -3,  4])
C = [c0, c1, c2]
d0 = vector(QQ, [ 1, -3,  2, -1])
d1 = vector(QQ, [ 0,  1,  0,  1])
d2 = vector(QQ, [-1,  2, -1, -1])
d3 = vector(QQ, [ 2, -8,  4, -3])
D = [d0, d1, d2, d3]
e0 = vector(QQ, [ 0,  1, -3])
e1 = vector(QQ, [-1,  2, -1])
e2 = vector(QQ, [ 2, -4,  3])
E = [e0, e1, e2]
U1 = U.subspace_with_basis(B)
V1 = V.subspace_with_basis(C)
T1 = linear_transformation(U1, V1, T_symbolic)
MTBC =T1.matrix(side='right')
MTBC
</script></div>

<br><br><div class="sage-MRCB"><script type="text/x-sage">U2 = U.subspace_with_basis(D)
V2 = V.subspace_with_basis(E)
T2 = linear_transformation(U2, V2, T_symbolic)
MTDE = T2.matrix(side='right')
MTDE
</script></div>

<p>This is as far as we could go back in <a href="section-MR.html" title="Matrix Representations">Section MR</a>.  These two matrices represent the same linear transformation (namely <span class="code">T_symbolic</span>), but the question now is “how are these representations related?”  We need two change-of-basis matrices.  Notice that with different dimensions for the domain and codomain, we get square matrices of different sizes.</p>

<br><br><div class="sage-MRCB"><script type="text/x-sage">identity4(x1, x2, x3, x4) = [x1, x2, x3, x4]
CU = linear_transformation(U2, U1, identity4)
CBDB = CU.matrix(side='right')
CBDB
</script></div>

<br><br><div class="sage-MRCB"><script type="text/x-sage">identity3(x1, x2, x3) = [x1, x2, x3]
CV = linear_transformation(V1, V2, identity3)
CBCE = CV.matrix(side='right')
CBCE
</script></div>

<p>Finally, here is <a class="knowl" acro="MRCB" type="Theorem" title="Matrix Representation and Change of Basis" knowl="./knowls/theorem.MRCB.knowl">Theorem MRCB</a>, relating the the two matrix representations via the change-of-basis matrices.</p>

<br><br><div class="sage-MRCB"><script type="text/x-sage">MTDE == CBCE * MTBC * CBDB
</script></div>

<p>We can walk through this theorem just a bit more carefully, step-by-step.  We will compute three matrix-vector products, using three vector representations, to demonstrate the equality above.  To prepare, we choose the vector <span class="code">x</span> arbitrarily, and we compute its value when evaluted by <span class="code">T_symbolic</span>, and then verify the vector and matrix representations relative to <span class="code">D</span> and <span class="code">E</span>.</p>

<br><br><div class="sage-MRCB"><script type="text/x-sage">T_symbolic(34, -61, 55, 18)
</script></div>

<br><br><div class="sage-MRCB"><script type="text/x-sage">x = vector(QQ, [34, -61, 55, 18])
u_D = U2.coordinate_vector(x)
u_D
</script></div>

<br><br><div class="sage-MRCB"><script type="text/x-sage">v_E = V2.coordinate_vector(vector(QQ, [-342, -236, 106]))
v_E
</script></div>

<br><br><div class="sage-MRCB"><script type="text/x-sage">v_E == MTDE*u_D
</script></div>

<p>So far this is not really new, we have just verified the representation <span class="code">MTDE</span> in the case of one input vector (<span class="code">x</span>), but now we will use the alternate version of this matrix representation, <span class="code">CBCE * MTBC * CBDB</span>, in steps.</p>

<p>First, convert the input vector from a representation relative to <span class="code">D</span> to a representation relative to <span class="code">B</span>.</p>

<br><br><div class="sage-MRCB"><script type="text/x-sage">u_B = CBDB*u_D
u_B
</script></div>

<p>Now apply the matrix representation, which expects “input” coordinatized relative to <span class="code">B</span> and produces “output” coordinatized relative to <span class="code">C</span>.</p>

<br><br><div class="sage-MRCB"><script type="text/x-sage">v_C = MTBC*u_B
v_C
</script></div>

<p>Now convert the output vector from a representation relative to <span class="code">C</span> to a representation relative to <span class="code">E</span>.</p>

<br><br><div class="sage-MRCB"><script type="text/x-sage">v_E = CBCE*v_C
v_E
</script></div>

<p>It is no surprise that this version of <span class="code">v_E</span> equals the previous one, since we have checked the equality of the matrices earlier.  But it may be instructive to see the input converted by change-of-basis matrices before and after being hit by the linear transformation (as a matrix representation).</p>

<p>Now we will perform another example, but this time using Sage endomorphisms, linear transformations with equal bases for the domain and codomain.  This will allow us to illustrate <a class="knowl" acro="SCB" type="Theorem" title="Similarity and Change of Basis" knowl="./knowls/theorem.SCB.knowl">Theorem SCB</a>.  Just for fun, we will do something large. Notice the labor-saving device for manufacturing many symbolic variables at once.</p>

<br><br><div class="sage-MRCB"><script type="text/x-sage">[var('x{0}'.format(i)) for i in range(1, 12)]
</script></div>

<br><br><div class="sage-MRCB"><script type="text/x-sage">x = vector(SR, [x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11])
A = matrix(QQ, 11, [
  [ 146, -225, -10,  212,  419, -123, -73,  3,  219, -100, -57],
  [ -24,   32,   1,  -33,  -66,   13,  16,  1,  -33,   18,   3],
  [  79, -131, -15,  124,  235,  -74, -33, -3,  128,  -57, -29],
  [  -1,   13, -16,   -1,  -27,    3,  -5, -4,   -9,    6,   2],
  [-104,  170,  20, -162, -307,   95,  45,  3, -167,   75,  37],
  [ -16,   59, -19,  -34, -103,   27, -10, -1,  -51,   27,   8],
  [  36,  -41,  -7,   46,   80,  -25, -26,  2,   42,  -18, -16],
  [  -5,    0,   1,   -4,   -3,    2,   6, -1,    0,   -2,   3],
  [ 105, -176, -28,  168,  310, -103, -41, -4,  172,  -73, -40],
  [   1,    7,   0,   -3,   -9,    5,  -6, -2,   -7,    3,   2],
  [  74, -141,   4,  118,  255,  -72, -23, -1,  133,  -63, -26]
                   ])
out = (A*x).list()
T_symbolic(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11) = out
V1 = QQ^11
C = V1.basis()
T1 = linear_transformation(V1, V1, T_symbolic)
MC = T1.matrix(side='right')
MC
</script></div>

<p>Not very interesting, and perhaps even transparent, with a definiton from a matrix and with the standard basis attached to <span class="code">V1 == QQ^11</span>.  Let us use a different basis to obtain a more interesting representation.  We will input the basis compactly as the columns of a nonsingular matrix.</p>

<br><br><div class="sage-MRCB"><script type="text/x-sage">D = matrix(QQ, 11,
    [[ 1,  2, -1, -2,  4,  2,  2, -2,  4,  4,  8],
     [ 0,  1,  0,  2, -2,  1,  1, -1, -7,  5,  3],
     [ 1,  0,  0, -2,  3,  0, -1, -1,  6, -1, -1],
     [ 0, -1,  1, -1,  3, -2, -3,  0,  5, -8,  2],
     [-1,  0,  0,  3, -4,  0,  1,  1, -8,  1,  2],
     [-1, -1,  1,  0,  3, -3, -4, -1,  0, -7,  3],
     [ 0,  1,  0,  0,  2,  0,  0, -1,  0, -1,  8],
     [ 0,  0,  0, -1,  0,  0,  0,  1,  5, -4,  1],
     [ 1,  0,  0, -2,  3,  0, -2, -3,  3,  3, -4],
     [ 0, -1,  0,  0,  1, -1, -2, -1,  2, -4,  0],
     [ 1,  0, -1, -2,  0,  2,  2,  0,  5,  3, -1]])
E = D.columns()
V2 = (QQ^11).subspace_with_basis(E)
T2 = linear_transformation(V2, V2, T_symbolic)
MB = T2.matrix(side='right')
MB
</script></div>

<p>Well, now <em>that</em> is interesting!  What a nice representation.  Of course, it is all due to the choice of the basis (which we have not explained).  To explain the relationship between the two matrix representations, we need a change-of-basis-matrix, and its inverse.  <a class="knowl" acro="SCB" type="Theorem" title="Similarity and Change of Basis" knowl="./knowls/theorem.SCB.knowl">Theorem SCB</a> says we need the matrix that converts vector representations relative to <span class="code">B</span> into vector representations relative to <span class="code">C</span>.</p>

<br><br><div class="sage-MRCB"><script type="text/x-sage">out = [x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11]
id11(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11) = out
L = linear_transformation(V2, V1, id11)
CB = L.matrix(side='right')
CB
</script></div>

<p>OK, all set.</p>

<br><br><div class="sage-MRCB"><script type="text/x-sage">CB^-1*MC*CB
</script></div>

<p>Which is <span class="code">MB</span>.  So the conversion from a “messy” matrix representation relative to a standard basis to a “clean” representation relative to some other basis is just a similarity transformation by a change-of-basis matrix.  Oh, I almost forgot.  Where did that basis come from?  Hint: find a description of “Jordan Canonical Form”, perhaps in our Second Course in Linear Algebra.</p>

<br><br><div class="sage-MRCB sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

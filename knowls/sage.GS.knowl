<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-GS', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">GS</span> <span class="titletext">Getting Started</span>
</h5>


<p>Sage is a powerful system for studying and exploring many different areas of mathematics.  In the next section, and the majority of the remaining section, we will include short descriptions and examples using Sage.  You can read a bit more about Sage in the Preface.  If you are not already reading this in an electronic version, you may want to investigate obtaining the worksheet version of this book, where the examples are “live” and editable.
Most of your interaction with Sage will be by typing commands into a <em>compute cell</em>.  That is a compute cell just below this paragraph.  Click once inside the compute cell and you will get a more distinctive border around it, a blinking cursor inside, plus a cute little “evaluate” link below it.</p>

<br><br><div class="sage-GS"><script type="text/x-sage"></script></div>

<p>At the cursor, type <span class="code">2+2</span> and then click on the evaluate link.  Did a <span class="code">4</span> appear below the cell?  If so, you have successfully sent a command off for Sage to evaluate and you have received back the (correct) answer.</p>

<p>Here is another compute cell.  Try evaluating the command <span class="code">factorial(300)</span>.</p>

<br><br><div class="sage-GS"><script type="text/x-sage"></script></div>

<p>Hmmmmm.  That is quite a big integer!  The slashes you see at the end of each line mean the result is continued onto the next line, since there are 615 digits in the result.</p>

<p>To make new compute cells, hover your mouse just above another compute cell, or just below some output from a compute cell.  When you see a skinny blue bar across the width of your worksheet, click and you will open up a new compute cell, ready for input.  Note that your worksheet will remember any calculations you make, in the order you make them, no matter where you put the cells, so it is best to stay organized and add new cells at the bottom.</p>

<p>Try placing your cursor just below the monstrous value of $300!$ that you have.  Click on the blue bar and try another factorial computation in the new compute cell.</p>

<p>Each compute cell will show output due to only the very last command in the cell.  Try to predict the following output before evaluating the cell.</p>

<br><br><div class="sage-GS"><script type="text/x-sage">a = 10
b = 6
a = a + 20
a
</script></div>

<p>The following compute cell will not print anything since the one command does not create output.  But it will have an effect, as you can see when you execute the subsequent cell.  Notice how this uses the value of <span class="code">b</span> from above.  Execute this compute cell <em>once</em>.  Exactly once.  Even if it <em>appears</em> to do nothing.  If you execute the cell twice, your credit card may be charged twice.</p>

<br><br><div class="sage-GS"><script type="text/x-sage">b = b + 50
</script></div>

<p>Now execute this cell, which will produce some output.</p>

<br><br><div class="sage-GS"><script type="text/x-sage">b + 20
</script></div>

<p>So <span class="code">b</span> came into existence as <span class="code">6</span>.  Then a cell added <span class="code">50</span>.  This assumes you only executed this cell once!  In the last cell we create <span class="code">b+20</span> (but do not save it) and it is this value that is output.</p>

<p>You can combine several commands on one line with a semi-colon.  This is a great way to get multiple outputs from a compute cell.  The syntax for building a matrix should be somewhat obvious when you see the output, but if not, it is not particularly important to understand now.</p>

<br><br><div class="sage-GS"><script type="text/x-sage">f(x) = x^8 - 7*x^4; f
</script></div>

<br><br><div class="sage-GS"><script type="text/x-sage">f; print ; f.derivative()
</script></div>

<br><br><div class="sage-GS"><script type="text/x-sage">g = f.derivative()
g.factor()
</script></div>

<p>Some commands in Sage are “functions,” an example is <span class="code">factorial()</span> above.  Other commands are “methods” of an object and are like characteristics of objects, examples are <span class="code">.factor()</span> and <span class="code">.derivative()</span> as methods of a function.  To comment on your work, you can open up a small word-processor.  Hover your mouse until you get the skinny blue bar again, but now when you click, also hold the SHIFT key at the same time.  Experiment with fonts, colors, bullet lists, etc and then click the “Save changes” button to exit.  Double-click on your text if you need to go back and edit it later.</p>


<p>Open the word-processor again to create a new bit of text (maybe next to the empty compute cell just below).  Type all of the following <em>exactly</em>, but do not include any backslashes that might precede the dollar signs in the print version:</p>


<span class="code">Pythagorean Theorem: \$c^2=a^2+b^2\$</span>

<p>and save your changes.  The symbols between the dollar signs are written according to the mathematical typesetting language known as TeX — cruise the internet to learn more about this very popular tool. (Well, it is extremely popular among mathematicians and physical scientists.)</p>

<br><br><div class="sage-GS"><script type="text/x-sage"></script></div>

<p>Much of our interaction with sets will be through Sage lists.  These are not really sets — they allow duplicates, and order matters.  But they are so close to sets, and so easy and powerful to use that we will use them regularly.  We will use a fun made-up list for practice, the quote marks mean the items are just text, with no special mathematical meaning.  Execute these compute cells as we work through them.</p>

<br><br><div class="sage-GS"><script type="text/x-sage">zoo = ['snake', 'parrot', 'elephant', 'baboon', 'beetle']
zoo
</script></div>

<p>So the square brackets define the boundaries of our list, commas separate items, and we can give the list a name.  To work with just one element of the list, we use the name and a pair of brackets with an index.  Notice that lists have indices that <em>begin counting at zero</em>.  This will seem odd at first and will seem very natural later.</p>

<br><br><div class="sage-GS"><script type="text/x-sage">zoo[2]
</script></div>

<p>We can add a new creature to the zoo, it is joined up at the far right end.</p>

<br><br><div class="sage-GS"><script type="text/x-sage">zoo.append('ostrich'); zoo
</script></div>

<p>We can remove a creature.</p>

<br><br><div class="sage-GS"><script type="text/x-sage">zoo.remove('parrot')
zoo
</script></div>

<p>We can extract a sublist.  Here we start with element 1 (the elephant) and go all the way up to, <em>but not including</em>, element 3 (the beetle).  Again a bit odd, but it will feel natural later.  For now, notice that we are extracting two elements of the lists, exactly $3-1=2$ elements.</p>

<br><br><div class="sage-GS"><script type="text/x-sage">mammals = zoo[1:3]
mammals
</script></div>

<p>Often we will want to see if two lists are equal.  To do that we will need to sort a list first.  A function creates a new, sorted list, leaving the original alone.  So we need to save the new one with a new name.</p>

<br><br><div class="sage-GS"><script type="text/x-sage">newzoo = sorted(zoo)
newzoo
</script></div>

<br><br><div class="sage-GS"><script type="text/x-sage">zoo.sort()
zoo
</script></div>

<p>Notice that if you run this last compute cell your zoo has changed and some commands above will not necessarily execute the same way.  If you want to experiment, go all the way back to the first creation of the zoo and start executing cells again from there with a fresh zoo.</p>

<p>A construction called a “list comprehension” is especially powerful, especially since it almost exactly mirrors notation we use to describe sets.  Suppose we want to form the plural of the names of the creatures in our zoo.  We build a new list, based on all of the elements of our old list.</p>

<br><br><div class="sage-GS"><script type="text/x-sage">plurality_zoo = [animal+'s' for animal in zoo]
plurality_zoo
</script></div>

<p>Almost like it says: we add an “s” to each animal name, for each animal in the zoo, and place them in a new list.  Perfect.  (Except for getting the plural of “ostrich” wrong.)</p>

<p>One final type of list, with numbers this time.  The <span class="code">range()</span> function will create lists of integers.  In its simplest form an invocation like <span class="code">range(12)</span> will create a list of 12 integers, <em>starting at zero</em> and working up to, <em>but not including</em>, 12.  Does this sound familiar?</p>

<br><br><div class="sage-GS"><script type="text/x-sage">dozen = range(12); dozen
</script></div>

<p>Here are two other forms, that you should be able to understand by studying the examples.</p>

<br><br><div class="sage-GS"><script type="text/x-sage">teens = range(13, 20); teens
</script></div>

<br><br><div class="sage-GS"><script type="text/x-sage">decades = range(1900, 2000, 10); decades
</script></div>

<p>There is a “Save” button in the upper-right corner of your worksheet.  This will save a current copy of your worksheet that you can retrieve from within your notebook again later, though you have to re-execute all the cells when you re-open the worksheet later.</p>

<p>There is also a “File” drop-down list, on the left, just above your very top compute cell (not be confused with your browser's File menu item!).  You will see a choice here labeled  “Save worksheet to a file...”  When you do this, you are creating a copy of your worksheet in the “sws” format (short for “Sage WorkSheet”).  You can email this file, or post it on a website, for other Sage users and they can use the “Upload” link on their main notebook page to incorporate a copy of your worksheet into their notebook.</p>

<p>There are other ways to share worksheets that you can experiment with, but this gives you one way to share any worksheet with anybody almost anywhere.</p>

<p>We have covered a lot here in this section, so come back later to pick up tidbits you might have missed.  There are also many more features in the notebook that we have not covered.</p>

<br><br><div class="sage-GS sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

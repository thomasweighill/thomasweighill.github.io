<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-NS', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">NS</span> <span class="titletext">Null Space</span>
</h5>


<p>Sage will compute a null space for us.  Which is rather remarkable, as it is an infinite set!  Again, this is a powerful command, and there is lots of associated theory, so we will not understand everything about it right away, and it also has a radically different name in Sage.  But we will find it useful immediately.  Let us reprise <a class="knowl" acro="NSEAI" type="Example" title="Null space elements of Archetype I" knowl="./knowls/example.NSEAI.knowl">Example NSEAI</a>.  The relevant command to build the null space of a matrix is <span class="code">.right_kernel()</span>, where again, we will rely exclusively on the “right” version.  Also, to match our work in the text, and make the results more recognizable, we will consistently us the keyword option <span class="code">basis='pivot'</span>, which we will be able to explain once we have more theory (<a class="knowl" acro="SSNS" type="Sage" title="" knowl="./knowls/sage.SSNS.knowl">Sage SSNS</a>, <a class="knowl" acro="SUTH0" type="Sage" title="" knowl="./knowls/sage.SUTH0.knowl">Sage SUTH0</a>).  Note too, that this is a place where it is critical that matrices are defined to use the rationals as their number system (<span class="code">QQ</span>).</p>

<br><br><div class="sage-NS"><script type="text/x-sage">I = matrix(QQ, [[ 1,  4,  0, -1,  0,   7, -9],
                [ 2,  8, -1,  3,  9, -13,  7],
                [ 0,  0,  2, -3, -4,  12, -8],
                [-1, -4,  2,  4,  8, -31, 37]])
nsp = I.right_kernel(basis='pivot')
nsp
</script></div>

<p>As we said, <span class="code">nsp</span> contains a lot of unfamiliar information.  Ignore most of it for now.  But as a set, we can test membership in <span class="code">nsp</span>.</p>

<br><br><div class="sage-NS"><script type="text/x-sage">x = vector(QQ, [3, 0, -5, -6, 0, 0, 1])
x in nsp
</script></div>

<br><br><div class="sage-NS"><script type="text/x-sage">y = vector(QQ, [-4, 1, -3, -2, 1, 1, 1])
y in nsp
</script></div>

<br><br><div class="sage-NS"><script type="text/x-sage">z = vector(QQ, [1, 0, 0, 0, 0, 0, 2])
z in nsp
</script></div>

<p>We did a bad thing above, as Sage likes to use <span class="code">I</span> for the imaginary number $i=\sqrt{-1}$ and we just clobbered that.  We will not do it again.  See below how to fix this.</p>

<p><span class="code">nsp</span> is an infinite set.  Since we know the null space is defined as solution to a system of equations, and the work above shows it has at least two elements, we are not surprised to discover that the set is infinite (<a class="knowl" acro="PSSLS" type="Theorem" title="Possible Solution Sets for Linear Systems" knowl="./knowls/theorem.PSSLS.knowl">Theorem PSSLS</a>).</p>

<br><br><div class="sage-NS"><script type="text/x-sage">nsp.is_finite()
</script></div>

<p>If we want an element of the null space to experiment with, we can get a “random” element easily.  Evaluate the following compute cell repeatedly to get a feel for the variety of the different output.  You will see a different result each time, and the result supplied in your downloaded worksheet is very unlikely to be a result you will ever see again.  The bit of text, <span class="code"># random</span>, is technically a “comment”, but we are using it as a signal to our automatic testing of the Sage examples that this example should be skipped.  You <em>do not</em> need to use this device in your own work, though you may use the comment syntax if you wish.</p>

<br><br><div class="sage-NS"><script type="text/x-sage">z = nsp.random_element()
z                       # random
</script></div>

<br><br><div class="sage-NS"><script type="text/x-sage">z in nsp
</script></div>

<p>Sometimes, just sometimes, the null space is finite, and we can list its elements.  This is from <a class="knowl" acro="CNS2" type="Example" title="Computing a null space, no. 2" knowl="./knowls/example.CNS2.knowl">Example CNS2</a>.</p>

<br><br><div class="sage-NS"><script type="text/x-sage">C = matrix(QQ, [[-4, 6, 1],
                [-1, 4, 1],
                [ 5, 6, 7],
                [ 4, 7, 1]])
Cnsp = C.right_kernel(basis='pivot')
Cnsp.is_finite()
</script></div>

<br><br><div class="sage-NS"><script type="text/x-sage">Cnsp.list()
</script></div>

<p>Notice that we get back a list (which mathematically is really a set), and it has one element, the three-entry zero vector.</p>

<p>There is more to learn about exploring the null space with Sage's <span class="code">.right_kernel()</span> so we will see more of this matrix method.  In the meantime, if you are done experimenting with the matrix <span class="code">I</span> we can restore the variable <span class="code">I</span> back to being the imaginary number $i = \sqrt{-1}$ with the Sage <span class="code">restore()</span> command.</p>

<br><br><div class="sage-NS"><script type="text/x-sage">restore()
I^2
</script></div>

<br><br><div class="sage-NS sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-MISLE', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">MISLE</span> <span class="titletext">Matrix Inverse, Systems of Equations</span>
</h5>


<p>We can use the computational method described in this section in hopes of finding a matrix inverse, as <a class="knowl" acro="CINM" type="Theorem" title="Computing the Inverse of a Nonsingular Matrix" knowl="./knowls/theorem.CINM.knowl">Theorem CINM</a> gets us halfway there.  We will continue with the matrix from <a class="knowl" acro="MI" type="Example" title="Matrix inverse" knowl="./knowls/example.MI.knowl">Example MI</a>.  First we check that the matrix is nonsingular so we can apply the theorem, then we get “half” an inverse, and verify that it also behaves as a “full” inverse by meeting the full definition of a matrix inverse (<a class="knowl" acro="MI" type="Definition" title="Matrix Inverse" knowl="./knowls/definition.MI.knowl">Definition MI</a>).</p>

<br><br><div class="sage-MISLE"><script type="text/x-sage">A = matrix(QQ, [[ 1,  2,  1,  2,  1],
                [-2, -3,  0, -5, -1],
                [ 1,  1,  0,  2,  1],
                [-2, -3, -1, -3, -2],
                [-1, -3, -1, -3,  1]])
A.is_singular()
</script></div>

<br><br><div class="sage-MISLE"><script type="text/x-sage">I5 = identity_matrix(5)
M = A.augment(I5); M
</script></div>

<br><br><div class="sage-MISLE"><script type="text/x-sage">N = M.rref(); N
</script></div>

<br><br><div class="sage-MISLE"><script type="text/x-sage">J = N.matrix_from_columns(range(5,10)); J
</script></div>

<br><br><div class="sage-MISLE"><script type="text/x-sage">A*J == I5
</script></div>

<br><br><div class="sage-MISLE"><script type="text/x-sage">J*A == I5
</script></div>

<p>Note that the matrix <span class="code">J</span> is constructed by taking the last 5 columns of <span class="code">N</span> (numbered 5 through 9) and using them in the <span class="code">matrix_from_columns()</span> matrix method.  What happens if you apply the procedure above to a singular matrix?  That would be an instructive experiment to conduct.</p>

<p>With an inverse of a coefficient matrix in hand, we can easily solve systems of equations, in the style of <a class="knowl" acro="SABMI" type="Example" title="Solutions to Archetype B with a matrix inverse" knowl="./knowls/example.SABMI.knowl">Example SABMI</a>.  We will recycle the matrices <span class="code">A</span> and its inverse, <span class="code">J</span>, from above, so be sure to run those compute cells first if you are playing along.  We consider a system with <span class="code">A</span> as a coefficient matrix and solve a linear system twice, once the old way and once the new way.  Recall that with a nonsingular coefficient matrix, the solution will be unique for any choice of <span class="code">const</span>, so you can experiment by changing the vector of constants and re-executing the code.</p>

<br><br><div class="sage-MISLE"><script type="text/x-sage">const = vector(QQ, [3, -4, 2, 1, 1])
A.solve_right(const)
</script></div>

<br><br><div class="sage-MISLE"><script type="text/x-sage">J*const
</script></div>

<br><br><div class="sage-MISLE"><script type="text/x-sage">A.solve_right(const) == J*const
</script></div>

<br><br><div class="sage-MISLE sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

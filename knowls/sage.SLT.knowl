<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-SLT', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">SLT</span> <span class="titletext">Surjective Linear Transformations</span>
</h5>


<p>The situation in Sage for surjective linear transformations is similar to that for injective linear transformations.  One distinction â€” what your text calls the range of a linear transformation is called the image of a transformation, obtained with the <span class="code">.image()</span> method.  Sage's term is more commonly used, so you are likely to see it again.  As before, two examples, first up is <a class="knowl" acro="RAO" type="Example" title="Range, Archetype O" knowl="./knowls/example.RAO.knowl">Example RAO</a>.</p>

<br><br><div class="sage-SLT"><script type="text/x-sage">U = QQ^3
V = QQ^5
x1, x2, x3 = var('x1, x2, x3')
outputs = [ -x1 +   x2 - 3*x3,
            -x1 + 2*x2 - 4*x3,
             x1 +   x2 +   x3,
           2*x1 + 3*x2 +   x3,
             x1        + 2*x3]
T_symbolic(x1, x2, x3) = outputs
T = linear_transformation(U, V, T_symbolic)
T.is_surjective()
</script></div>

<br><br><div class="sage-SLT"><script type="text/x-sage">T.image()
</script></div>

<p>Besides showing the relevant commands in action, this demonstrates one half of <a class="knowl" acro="RSLT" type="Theorem" title="Range of a Surjective Linear Transformation" knowl="./knowls/theorem.RSLT.knowl">Theorem RSLT</a>.  Now a reprise of <a class="knowl" acro="FRAN" type="Example" title="Full range, Archetype N" knowl="./knowls/example.FRAN.knowl">Example FRAN</a>.</p>

<br><br><div class="sage-SLT"><script type="text/x-sage">U = QQ^5
V = QQ^3
x1, x2, x3, x4, x5 = var('x1, x2, x3, x4, x5')
outputs = [2*x1 +   x2 + 3*x3 - 4*x4 + 5*x5,
             x1 - 2*x2 + 3*x3 - 9*x4 + 3*x5,
           3*x1        + 4*x3 - 6*x4 + 5*x5]
S_symbolic(x1, x2, x3, x4, x5) = outputs
S = linear_transformation(U, V, S_symbolic)
S.is_surjective()
</script></div>

<br><br><div class="sage-SLT"><script type="text/x-sage">S.image()
</script></div>

<br><br><div class="sage-SLT"><script type="text/x-sage">S.image() == V
</script></div>

<p>Previously, we have chosen elements of the codomain which have nonempty or empty preimages.  We can now explain how to do this predictably.  <a class="knowl" acro="RPI" type="Theorem" title="Range and Pre-Image" knowl="./knowls/theorem.RPI.knowl">Theorem RPI</a> explains that elements of the codomain with nonempty pre-images are precisely elements of the image.  Consider the non-surjective linear transformation <span class="code">T</span> from above.</p>

<br><br><div class="sage-SLT"><script type="text/x-sage">TI = T.image()
B = TI.basis()
B
</script></div>

<br><br><div class="sage-SLT"><script type="text/x-sage">b0 = B[0]
b1 = B[1]
</script></div>

<p>Now any linear combination of the basis vectors <span class="code">b0</span> and <span class="code">b1</span> must be an element of the image.  Moreover, the first two slots of the resulting vector will equal the two scalars we choose to create the linear combination.  But most importantly, see that the three remaining slots will be uniquely determined by these two choices.  This means there is exactly one vector in the image with these values in the first two slots.  So if we construct a new vector with these two values in the first two slots, and make any part of the last three slots even slightly different, we will form a vector that cannot be in the image, and will thus have a preimage that is an empty set.  Whew, that is probably worth reading carefully several times, perhaps in conjunction with the example following.</p>

<br><br><div class="sage-SLT"><script type="text/x-sage">in_image = 4*b0 + (-5)*b1
in_image
</script></div>

<br><br><div class="sage-SLT"><script type="text/x-sage">T.preimage_representative(in_image)
</script></div>

<br><br><div class="sage-SLT"><script type="text/x-sage">outside_image = 4*b0 + (-5)*b1 + vector(QQ, [0, 0, 0, 0, 1])
outside_image
</script></div>

<br><br><div class="sage-SLT"><script type="text/x-sage">T.preimage_representative(outside_image)
</script></div>

<br><br><div class="sage-SLT sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-SS1', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">SS1</span> <span class="titletext">Solving Systems, Part 1</span>
</h5>


<p>Sage has a built-in command that will solve a linear system of equations, given a coefficient matrix and a vector of constants.  We need to learn some more theory before we can entirely understand this command, but we can begin to explore its use.  For now, consider these methods experimental and do not let it replace row-reducing augmented matrices.</p>

<p>The matrix method <span class="code">A.solve_right(b)</span> will provide information about solutions to the linear system of equations with coefficient matrix <span class="code">A</span> and vector of constants <span class="code">b</span>.  The reason for the “right” (and the corresponding command named with “left”) will have to wait for <a class="knowl" acro="MVP" type="Sage" title="" knowl="./knowls/sage.MVP.knowl">Sage MVP</a>.  For now, it is generally correct in this course to use the “right” variant of any Sage linear algebra command that has both “left” and “right” variants.</p>

<p>Let us apply the <span class="code">.solve_right()</span> command to a system with no solutions, in particular <a knowl="./knowls/archetype.E.knowl">Archetype E</a>.  We have already seen in <a class="knowl" acro="RCLS" type="Sage" title="" knowl="./knowls/sage.RCLS.knowl">Sage RCLS</a> that this system is inconsistent.</p>

<br><br><div class="sage-SS1"><script type="text/x-sage">coeff = matrix(QQ, [[ 2, 1,  7, -7],
                    [-3, 4, -5, -6],
                    [ 1, 1,  4, -5]])
const = vector(QQ, [2, 3, 2])
coeff.solve_right(const)
</script></div>

<p>This is our first discussion of Sage error messages, though undoubtedly you have seen several already!  First, here we only show the first and last lines of the message since typically it contains a lot of information specific to whichever computer you may be using.  but we always begin with the last line as the most important indication of what has happened.  Here the “problem” is quite evident: we get an “error” message telling us that the <span class="code">matrix equation has no solutions</span>.  We can debate whether or not this is really an error, but that is the design decision taken in Sage — we just need to be aware of it, the <span class="code">.solve_right()</span> is really only valuable when there is a solution.</p>

<p>Generally, when deciphering Sage error messages, you want to start at the bottom of the “traceback” and read up through the various routines that have been called.  Execute the block above and you may see references to matrix methods such as <span class="code">._solve_right_general()</span> and then <span class="code">.solve_right()</span>.  With time and practice, these mysterious messages will become more and more helpful, so spend some time reading them in tandem with locating the real source of any problems you encounter.</p>

<p>What does <span class="code">.solve_right()</span> do with a system that does have solutions?  Let us take a look at <a class="knowl" acro="ISSI" type="Example" title="Describing infinite solution sets, Archetype I" knowl="./knowls/example.ISSI.knowl">Example ISSI</a> again, as we did in <a class="knowl" acro="FDV" type="Sage" title="" knowl="./knowls/sage.FDV.knowl">Sage FDV</a>.</p>

<br><br><div class="sage-SS1"><script type="text/x-sage">coeff = matrix(QQ, [[ 1,  4,  0, -1,  0,   7, -9],
                    [ 2,  8, -1,  3,  9, -13,  7],
                    [ 0,  0,  2, -3, -4,  12, -8],
                    [-1, -4,  2,  4,  8, -31, 37]])
const = vector(QQ, [3, 9, 1, 4])
coeff.solve_right(const)
</script></div>

<p>This vector with 7 entries is indeed a solution to the system of equations (check this!).  But from <a class="knowl" acro="ISSI" type="Example" title="Describing infinite solution sets, Archetype I" knowl="./knowls/example.ISSI.knowl">Example ISSI</a> we know this system has <em>infinitely</em> many solutions.  Why does Sage give us just one solution?  Of the infinitely many solutions, why this one?  How can a finite computer <em>ever</em> present us with infinitely many solutions?  Do we have the time to read through an infinite list of solutions?  Is there a “best” solution?  This behavior should prompt these questions, and maybe more.</p>

<p>In order to totally understand the behavior of the <span class="code">.solve_right()</span> command, we need to understand more of the theory of linear algebra.  In good time.  So for now, <span class="code">.solve_right()</span> is a curiosity we will fully understand soon — specifically in <a class="knowl" acro="SS2" type="Sage" title="" knowl="./knowls/sage.SS2.knowl">Sage SS2</a> and <a class="knowl" acro="SS3" type="Sage" title="" knowl="./knowls/sage.SS3.knowl">Sage SS3</a>.</p>

<br><br><div class="sage-SS1 sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

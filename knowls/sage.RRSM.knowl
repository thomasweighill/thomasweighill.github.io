<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-RRSM', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">RRSM</span> <span class="titletext">Row-Reducing a Symbolic Matrix</span>
</h5>


<p>Sage can very nearly reproduce the reduced row-echelon form we obtained from the augmented matrix with variables present in the final column.  The first line below is a bit of advanced Sage.  It creates a number system <span class="code">R</span> mixing the rational numbers with the variables <span class="code">b1</span> through <span class="code">b6</span>.  It is not important to know the details of this construction right now.  <span class="code">B</span> is the reduced row-echelon form of <span class="code">A</span>, as computed by Sage, where we have displayed the last column separately so it will all fit.  You will notice that <span class="code">B</span> is different than what we used in <a class="knowl" acro="CSANS" type="Example" title="Column space as null space" knowl="./knowls/example.CSANS.knowl">Example CSANS</a>, where all the differences are in the final column.</p>

<p>However, we can perform row operations on the final two rows of <span class="code">B</span> to bring Sage's result in line with what we used above for the final two entries of the last column, which are the most critical.  Notice that since the final two rows are almost all zeros, any sequence of row operations on just these two rows will preserve the zeros (and we need only display the final column to keep track of our progress).</p>

<br><br><div class="sage-RRSM"><script type="text/x-sage">R.<b1,b2,b3,b4,b5,b6> = QQ[]
A = matrix(R, [[ 10,  0,  3,   8,   7, b1],
               [-16, -1, -4, -10, -13, b2],
               [ -6,  1, -3,  -6,  -6, b3],
               [  0,  2, -2,  -3,  -2, b4],
               [  3,  0,  1,   2,   3, b5],
               [ -1, -1,  1,   1,   0, b6]])
A
</script></div>

<br><br><div class="sage-RRSM"><script type="text/x-sage">B = copy(A.echelon_form())
B[0:6,0:5]
</script></div>

<br><br><div class="sage-RRSM"><script type="text/x-sage">B[0:6,5]
</script></div>

<br><br><div class="sage-RRSM"><script type="text/x-sage">B.rescale_row(4, 4); B[0:6, 5]
</script></div>

<br><br><div class="sage-RRSM"><script type="text/x-sage">B.add_multiple_of_row(5, 4, -1/4); B[0:6, 5]
</script></div>

<br><br><div class="sage-RRSM"><script type="text/x-sage">B.rescale_row(5, -1); B[0:6, 5]
</script></div>

<br><br><div class="sage-RRSM"><script type="text/x-sage">B.add_multiple_of_row(4, 5,-1); B[0:6, 5]
</script></div>

<p>Notice that the last two entries of the final column now have just a single <span class="code">b1</span> and a single <span class="code">B2</span>. We could continue to perform more row operations by hand, using the last two rows to progressively eliminate <span class="code">b1</span> and <span class="code">b2</span> from the other four expressions of the last column.  Since the two last rows have zeros in their first five entries, only the entries in the final column would change.  You will see that much of this section is about how to automate these final calculations.</p>

<br><br><div class="sage-RRSM sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

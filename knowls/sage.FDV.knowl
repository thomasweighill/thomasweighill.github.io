<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-FDV', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">FDV</span> <span class="titletext">Free and Dependent Variables</span>
</h5>


<p>Sage has the matrix method <span class="code">.pivot()</span> to quickly and easily identify the pivot columns of the reduced row-echelon form of a matrix.  Notice that we do not have to row-reduce the matrix first, we just ask which columns of a matrix $A$ <em>would be</em> the pivot columns of the matrix $B$ that is row-equivalent to $A$ and in reduced row-echelon form.  By <a class="knowl" acro="IDV" type="Definition" title="Independent and Dependent Variables" knowl="./knowls/definition.IDV.knowl">Definition IDV</a>, the indices of the pivot columns for an augmented matrix of a system of equations are the indices of the dependent variables.  And the remainder are free variables.  But be careful, Sage numbers columns starting from zero and mathematicians typically number variables starting from one.</p>

<p>Let us reprise <a class="knowl" acro="ISSI" type="Example" title="Describing infinite solution sets, Archetype I" knowl="./knowls/example.ISSI.knowl">Example ISSI</a>.</p>

<br><br><div class="sage-FDV"><script type="text/x-sage">coeff = matrix(QQ, [[ 1,  4, 0, -1,  0,   7, -9],
                    [ 2,  8,-1,  3,  9, -13,  7],
                    [ 0,  0, 2, -3, -4,  12, -8],
                    [-1, -4, 2,  4,  8, -31, 37]])
const = vector(QQ, [3, 9, 1, 4])
aug = coeff.augment(const)
dependent = aug.pivots()
dependent
</script></div>

<p>So, incrementing each column index by 1 gives us the same set $D$ of indices for the dependent variables.  To get the free variables, we can use the following code.  Study it and then read the explanation following.</p>

<br><br><div class="sage-FDV"><script type="text/x-sage">free = [index for index in range(7) if not index in dependent]
free
</script></div>

<p>This is a Python programming construction known as a “list comprehension” but in this setting I prefer to call it “set builder notation.”  Let us dissect the command in pieces.  The brackets (<span class="code">[,]</span>) create a new list.  The items in the list will be values of the variable <span class="code">index</span>.  <span class="code">range(7)</span> is another list, integers starting at <span class="code">0</span> and stopping <em>just before</em> <span class="code">7</span>.  (While perhaps a bit odd, this works very well when we consistently start counting at zero.) So <span class="code">range(7)</span> is the list <span class="code">[0,1,2,3,4,5,6]</span>.  Think of these as candidate values for <span class="code">index</span>, which are generated by <span class="code">for index in range(7)</span>.  Then we test each candidate, and keep it in the new list if it is <em>not</em> in the list <span class="code">dependent</span>.</p>

<p>This is entirely analogous to the following mathematics:</p>

\begin{align*}
F &amp;= \setparts{f}{1\leq f\leq 7, f\not\in D}
\end{align*}


<p>where $F$ is <span class="code">free</span>, $f$ is <span class="code">index</span>, and $D$ is <span class="code">dependent</span>, and we make the 0/1 counting adjustments.  This ability to construct sets in Sage with notation so closely mirroring the mathematics is a powerful feature worth mastering.  We will use it repeatedly.</p>

<p>It was a good exercise to use a list comprehension to form the list of columns that are not pivot columns.  However, Sage has us covered.</p>

<br><br><div class="sage-FDV"><script type="text/x-sage">free_and_easy = coeff.nonpivots()
free_and_easy
</script></div>

<p>Can you use this new matrix method to make a simpler version of the <span class="code">consistent()</span> function we designed above?</p>

<br><br><div class="sage-FDV sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

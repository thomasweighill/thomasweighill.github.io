<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-LTOE', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">LTOE</span> <span class="titletext">Linear Transformation Odds and Ends</span>
</h5>


<p>We should mention that the notation <span class="code">T^-1</span> will yield an inverse of a linear transformation in Sage.</p>

<br><br><div class="sage-LTOE"><script type="text/x-sage">U = QQ^4
V = QQ^4
x1, x2, x3, x4 = var('x1, x2, x3, x4')
outputs = [   x1 + 2*x2 - 5*x3 - 7*x4,
                     x2 - 3*x3 - 5*x4,
              x1 + 2*x2 - 4*x3 - 6*x4,
           -2*x1 - 2*x2 + 7*x3 + 8*x4]
T_symbolic(x1, x2, x3, x4) = outputs
T = linear_transformation(U, V, T_symbolic)
T^-1
</script></div>

<p>Also, the rank and nullity are what you might expect.  Recall that for a matrix Sage provides a left nullity and a right nullity.  There is no such distinction for linear transformations.  We verify <a class="knowl" acro="RPNDD" type="Theorem" title="Rank Plus Nullity is Domain Dimension" knowl="./knowls/theorem.RPNDD.knowl">Theorem RPNDD</a> as an example.</p>

<br><br><div class="sage-LTOE"><script type="text/x-sage">U = QQ^3
V = QQ^4
x1, x2, x3 = var('x1, x2, x3')
outputs = [ -x1        + 2*x3,
             x1 + 3*x2 + 7*x3,
             x1 +   x2 +   x3,
           2*x1 + 3*x2 + 5*x3]
R_symbolic(x1, x2, x3) = outputs
R = linear_transformation(QQ^3, QQ^4, R_symbolic)
R.rank()
</script></div>

<br><br><div class="sage-LTOE"><script type="text/x-sage">R.nullity()
</script></div>

<br><br><div class="sage-LTOE"><script type="text/x-sage">R.rank() + R.nullity() == U.dimension()
</script></div>

<br><br><div class="sage-LTOE sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

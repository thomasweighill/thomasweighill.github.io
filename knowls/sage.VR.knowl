<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-VR', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">VR</span> <span class="titletext">Vector Representations</span>
</h5>


<p>Vector representation is described in the text in a fairly abstract fashion.  Sage will support this view (which will be useful in the next section), as well as provide a more practical approach.  We will explain both approaches.  We begin with an arbitrarily chosen basis.  We then create an alternate version of <span class="code">QQ^4</span> with this basis as a“user basis”, namely <span class="code">V</span>.</p>

<br><br><div class="sage-VR"><script type="text/x-sage">v0 = vector(QQ, [ 1, 1, 1, 0])
v1 = vector(QQ, [ 1, 2, 3, 2])
v2 = vector(QQ, [ 2, 2, 3, 2])
v3 = vector(QQ, [-1, 3, 5, 5])
B = [v0, v1, v2, v3]
V = (QQ^4).subspace_with_basis(B)
V
</script></div>

<br><br><div class="sage-VR"><script type="text/x-sage">V.echelonized_basis_matrix()
</script></div>

<p>Now, the construction of a linear transformation will use the basis provided for <span class="code">V</span>.  In the proof of <a class="knowl" acro="VRLT" type="Theorem" title="Vector Representation is a Linear Transformation" knowl="./knowls/theorem.VRLT.knowl">Theorem VRLT</a> we defined a linear transformation $T$ that equaled $\vectrepname{B}$.  $T$ was defined by taking the basis vectors of $B$ to the basis composed of standard unit vectors (<a class="knowl" acro="SUV" type="Definition" title="Standard Unit Vectors" knowl="./knowls/definition.SUV.knowl">Definition SUV</a>).  This is exactly what we will accomplish in the following construction.  Note how the basis associated with the domain is automatically paired with the elements of the basis for the codomain.</p>

<br><br><div class="sage-VR"><script type="text/x-sage">rho = linear_transformation(V, QQ^4, (QQ^4).basis())
rho
</script></div>

<p>First, we verify <a class="knowl" acro="VRILT" type="Theorem" title="Vector Representation is an Invertible Linear Transformation" knowl="./knowls/theorem.VRILT.knowl">Theorem VRILT</a>:</p>

<br><br><div class="sage-VR"><script type="text/x-sage">rho.is_invertible()
</script></div>

<p>Notice that the matrix of the linear transformation is the identity matrix.  This might look odd now, but we will have a full explanation soon.  Let us see if this linear transformation behaves as it should.  We will “coordinatize” an arbitrary vector, <span class="code">w</span>.</p>

<br><br><div class="sage-VR"><script type="text/x-sage">w = vector(QQ, [-13, 28, 45, 43])
rho(w)
</script></div>

<br><br><div class="sage-VR"><script type="text/x-sage">lincombo = 3*v0 + 5*v1 + (-6)*v2 + 9*v3
lincombo
</script></div>

<br><br><div class="sage-VR"><script type="text/x-sage">lincombo == w
</script></div>

<p>Notice how the expression for <span class="code">lincombo</span> is exactly the messy expression displayed in <a class="knowl" acro="VR" type="Definition" title="Vector Representation" knowl="./knowls/definition.VR.knowl">Definition VR</a>. More precisely, we could even write this as:</p>

<br><br><div class="sage-VR"><script type="text/x-sage">w == sum([rho(w)[i]*B[i] for i in range(4)])
</script></div>

<p>Or we can test this equality repeatedly with random vectors.</p>

<br><br><div class="sage-VR"><script type="text/x-sage">u = random_vector(QQ, 4)
u == sum([rho(u)[i]*B[i] for i in range(4)])
</script></div>

<p>Finding a vector representation is such a fundamental operation that Sage has an easier command, bypassing the need to create a linear transformation.  It does still require constructing a vector space with the alternate basis.  Here goes, repeating the prior example.</p>

<br><br><div class="sage-VR"><script type="text/x-sage">w = vector(QQ, [-13, 28, 45, 43])
V.coordinate_vector(w)
</script></div>

<p>Boom!</p>

<br><br><div class="sage-VR sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

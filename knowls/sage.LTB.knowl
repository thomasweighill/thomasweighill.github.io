<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-LTB', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">LTB</span> <span class="titletext">Linear Transformations, Bases</span>
</h5>


<p>A third way to create a linear transformation in Sage is to provide a list of images for a basis, as motivated by <a class="knowl" acro="LTDB" type="Theorem" title="Linear Transformation Defined on a Basis" knowl="./knowls/theorem.LTDB.knowl">Theorem LTDB</a>.  The default is to use the standard basis as the inputs (<a class="knowl" acro="SUV" type="Definition" title="Standard Unit Vectors" knowl="./knowls/definition.SUV.knowl">Definition SUV</a>).  We will, once again, create our running example.</p>

<br><br><div class="sage-LTB"><script type="text/x-sage">U = QQ^3
V = QQ^4
v1 = vector(QQ, [-1, 1, 1, 2])
v2 = vector(QQ, [ 0, 3, 1, 3])
v3 = vector(QQ, [ 2, 7, 1, 5])
T = linear_transformation(U, V, [v1, v2, v3])
T
</script></div>

<p>Notice that there is no requirement that the list of images (in Sage or in <a class="knowl" acro="LTDB" type="Theorem" title="Linear Transformation Defined on a Basis" knowl="./knowls/theorem.LTDB.knowl">Theorem LTDB</a>) is a basis.  They do not even have to be different.  They could all be the zero vector (try it).</p>

<p>If we want to use an alternate basis for the domain, it is possible, but there are two caveats.  The first caveat is that we must be sure to provide a basis for the domain, Sage will give an error if the proposed basis is not linearly independent and we are responsible for providing the right number of vectors (which should be easy).</p>

We have seen that vector spaces can have alternate bases, which print<p>s as a “user basis.”  Here will provide the domain with an alternate basis.  The relevant command will create a subspace, but for now, we need to provide a big enough set to create the entire domain.  It is possible to use fewer linearly independent vectors, and create a proper subspace, but then we will not be able to use this proper subspace to build the linear transformation we want.</p>

<br><br><div class="sage-LTB"><script type="text/x-sage">u1 = vector(QQ, [ 1,  3, -4])
u2 = vector(QQ, [-1, -2,  3])
u3 = vector(QQ, [ 1,  1, -3])
U = (QQ^3).subspace_with_basis([u1, u2, u3])
U == QQ^3
</script></div>

<br><br><div class="sage-LTB"><script type="text/x-sage">U.basis_matrix()
</script></div>

<br><br><div class="sage-LTB"><script type="text/x-sage">U.echelonized_basis_matrix()
</script></div>

<p>We can use this alternate version of <span class="code">U</span> to create a linear transformation from specified images.  Superficially there is nothing real special about our choices for <span class="code">v1, v2, v3</span>.</p>

<br><br><div class="sage-LTB"><script type="text/x-sage">V = QQ^4
v1 = vector(QQ, [-9, -18,  0, -9])
v2 = vector(QQ, [ 7,  14,  0,  7])
v3 = vector(QQ, [-7, -17, -1, -10])
</script></div>

<p>Now we create the linear transformation.  Here is the second caveat:  the matrix of the linear transformation is no longer that provided by <a class="knowl" acro="MLTCV" type="Theorem" title="Matrix of a Linear Transformation, Column Vectors" knowl="./knowls/theorem.MLTCV.knowl">Theorem MLTCV</a>.  It may be obvious where the matrix comes from, but a full understanding of its interpretation will have to wait until <a href="section-MR.html" title="Matrix Representations">Section MR</a>.</p>

<br><br><div class="sage-LTB"><script type="text/x-sage">S = linear_transformation(U, V, [v1, v2, v3])
S.matrix(side='right')
</script></div>

<p>We suggested our choices for <span class="code">v1, v2, v3</span> were “random.”  Not so — the linear transformation <span class="code">S</span> just created is equal to the linear transformation <span class="code">T</span> above.  If you have run all the input in this subsection, in order, then you should be able to compare the <em>functions</em> <span class="code">S</span> and <span class="code">T</span>.  The next command should <em>always</em> produce <span class="code">True</span>.</p>

<br><br><div class="sage-LTB"><script type="text/x-sage">u = random_vector(QQ, 3)
T(u) == S(u)
</script></div>

<p>Notice that <span class="code">T == S</span> may not do what you expect here.  Instead, the linear transformation method <span class="code">.is_equal_function()</span> will perform a conclusive check of equality of two linear transformations as functions.</p>

<br><br><div class="sage-LTB"><script type="text/x-sage">T.is_equal_function(S)
</script></div>

<p>Can you reproduce this example?  In other words, define some linear transformation, any way you like.  Then give the domain an alternate basis and concoct the correct images to create a second linear transformation (by the method of this subsection) which is equal to the first.</p>

<br><br><div class="sage-LTB sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

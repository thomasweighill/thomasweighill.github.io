<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-LTM', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">LTM</span> <span class="titletext">Linear Transformations, Matrices</span>
</h5>


<p>A second way to build a linear transformation is to use a matrix, as motivated by <a class="knowl" acro="MBLT" type="Theorem" title="Matrices Build Linear Transformations" knowl="./knowls/theorem.MBLT.knowl">Theorem MBLT</a>.  But there is one caveat.  We have seen that Sage has a preference for rows, so when defining a linear transformation with a product of a matrix and a vector, <em>Sage forms a linear combination of the rows of the matrix with the scalars of the vector</em>.  This is expressed by writing the vector on the left of the matrix, where if we were to interpret the vector as a 1-row matrix, then the definition of matrix multiplication would do the right thing.</p>

<p>Remember throughout, a linear transformation has very little to do with the mechanism by which we define it.  Whether or not we use matrix multiplication with vectors on the left (Sage internally) or matrix multiplication with vectors on the right (your text), what matters is the <em>function</em> that results.  One concession to the “vector on the right” approach is that we can tell Sage that we mean for the matrix to define the linear transformation by multiplication with the vector on the right.  Here is our running example again — with some explanation following.</p>

<br><br><div class="sage-LTM"><script type="text/x-sage">A = matrix(QQ, [[-1, 0, 2],
                [ 1, 3, 7],
                [ 1, 1, 1],
                [ 2, 3, 5]])
T = linear_transformation(QQ^3, QQ^4, A, side='right')
T
</script></div>

<p>The way <span class="code">T</span> prints reflects the way Sage carries <span class="code">T</span> internally.  But notice that we defined <span class="code">T</span> in a way that is consistent with the text, via the use of the optional <span class="code">side='right'</span> keyword.  If you rework examples from the text, or use Sage to assist with exercises, be sure to remember this option.  In particular, when the matrix is square it might be easy to miss that you have forgotten this option.  Note too that Sage uses a more general term for a linear transformation, “vector space morphism.”  Just mentally translate from Sage-speak to the terms we use here in the text.</p>

<p>If the standard way that Sage prints a linear transformation is too confusing, you can get all the relevant information with a handful of commands.</p>

<br><br><div class="sage-LTM"><script type="text/x-sage">T.matrix(side='right')
</script></div>

<br><br><div class="sage-LTM"><script type="text/x-sage">T.domain()
</script></div>

<br><br><div class="sage-LTM"><script type="text/x-sage">T.codomain()
</script></div>

<p>So we can build a linear transformation in Sage from a matrix, as promised by <a class="knowl" acro="MBLT" type="Theorem" title="Matrices Build Linear Transformations" knowl="./knowls/theorem.MBLT.knowl">Theorem MBLT</a>.  Furthermore, <a class="knowl" acro="MLTCV" type="Theorem" title="Matrix of a Linear Transformation, Column Vectors" knowl="./knowls/theorem.MLTCV.knowl">Theorem MLTCV</a> says there is a matrix associated with every linear transformation.  This matrix is provided in Sage by the <span class="code">.matrix()</span> method, where we use the option <span class="code">side='right'</span> to be consistent with the text.  Here is <a class="knowl" acro="MOLT" type="Example" title="Matrix of a linear transformation" knowl="./knowls/example.MOLT.knowl">Example MOLT</a> reprised, where we define the linear transformation via a Sage symbolic function and then recover the matrix of the linear transformation.</p>

<br><br><div class="sage-LTM"><script type="text/x-sage">x1, x2, x3 = var('x1, x2, x3')
outputs = [3*x1 - 2*x2 + 5*x3,
             x1 +   x2 +   x3,
           9*x1 - 2*x2 + 5*x3,
                  4*x2       ]
S_symbolic(x1, x2, x3) = outputs
S = linear_transformation(QQ^3, QQ^4, S_symbolic)
C = S.matrix(side='right'); C
</script></div>

<br><br><div class="sage-LTM"><script type="text/x-sage">x = vector(QQ, [2, -3, 3])
S(x) == C*x
</script></div>

<br><br><div class="sage-LTM sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>

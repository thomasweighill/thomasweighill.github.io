<script>
$(function () {sagecell.makeSagecell({inputLocation: '.sage-LTR', linked: true});});
</script><h5 class="sage">
<span class="type">Sage</span> <span class="acro">LTR</span> <span class="titletext">Linear Transformation Restrictions</span>
</h5>


<p><a class="knowl" acro="KNSI" type="Theorem" title="Kernel and Null Space Isomorphism" knowl="./knowls/theorem.KNSI.knowl">Theorem KNSI</a> and <a class="knowl" acro="RCSI" type="Theorem" title="Range and Column Space Isomorphism" knowl="./knowls/theorem.RCSI.knowl">Theorem RCSI</a> have two of the most subtle proofs we have seen so far.  The conclusion that two vector spaces are isomorphic is established by actually constructing an isomorphism between the vector spaces.  To build the isomorphism, we begin with a familar object, a vector representation linear transformation, but the hard work is showing that we can “restrict” the domain and codomain of this function and still arrive at a legitimate (invertible) linear transformation.  In an effort to make the proofs more concrete, we will walk through a nontrivial example for <a class="knowl" acro="KNSI" type="Theorem" title="Kernel and Null Space Isomorphism" knowl="./knowls/theorem.KNSI.knowl">Theorem KNSI</a>, and you might try to do the same for <a class="knowl" acro="RCSI" type="Theorem" title="Range and Column Space Isomorphism" knowl="./knowls/theorem.RCSI.knowl">Theorem RCSI</a>.  (An understanding of this subsection is not needed for the remainder — its second purpose is to demonstrate some of the powerful tools Sage provides.)</p>

<p>Here are the pieces.  We build a linear transformation with two different representations, one with respect to standard bases, the other with respect to less-obvious bases.</p>

<br><br><div class="sage-LTR"><script type="text/x-sage">x1, x2, x3, x4, x5 = var('x1, x2, x3, x4, x5')
outputs = [ x1 - x2 - 5*x3 +   x4 +   x5,
            x1      - 2*x3 -   x4 -   x5,
               - x2 - 3*x3 + 2*x4 + 2*x5,
           -x1 + x2 + 5*x3 -   x4 -   x5]
T_symbolic(x1, x2, x3, x4, x5) = outputs
b0 = vector(QQ, [-1,  6,  5,  5,  1])
b1 = vector(QQ, [-1,  5,  4,  4,  1])
b2 = vector(QQ, [-2,  4,  3,  2,  5])
b3 = vector(QQ, [ 1, -1,  0,  1, -5])
b4 = vector(QQ, [ 3, -7, -6, -5, -4])
U = (QQ^5).subspace_with_basis([b0, b1, b2, b3, b4])
c0 = vector(QQ, [1, 1, 1, -3])
c1 = vector(QQ, [-2, 3, -6, -7])
c2 = vector(QQ, [0, -1, 1, 2])
c3 = vector(QQ, [-1, 3, -4, -7])
V = (QQ^4).subspace_with_basis([c0, c1, c2, c3])
T_plain = linear_transformation(QQ^5, QQ^4, T_symbolic)
T_fancy = linear_transformation(   U,    V, T_symbolic)
</script></div>

<p>Now we compute the kernel of the linear transformation using the “plain” version, and the null space of a matrix representation coming from the “fancy” version.</p>

<br><br><div class="sage-LTR"><script type="text/x-sage">K = T_plain.kernel()
K
</script></div>

<br><br><div class="sage-LTR"><script type="text/x-sage">MK = T_fancy.matrix(side='right').right_kernel()
MK
</script></div>

<p>So quite obviously, the kernel of the linear transformation is quite different looking from the null space of the matrix representation.  Though it is no accident that they have the same dimension.  Now we build the necessary vector representation, and use two Sage commands to “restrict” the function to a smaller domain (the kernel of the linear transformation) and a smaller codomain (the null space of the matrix representation relative to nonstandard bases).</p>

<br><br><div class="sage-LTR"><script type="text/x-sage">rhoB = linear_transformation(U, QQ^5, (QQ^5).basis())
rho_restrict = rhoB.restrict_domain(K).restrict_codomain(MK)
rho_restrict
</script></div>

<p>The first success is that the restriction was even created.  Sage would recognize if the original linear transformation ever carried an input from the restricted domain to an output that was not contained in the proposed codomain, and would have raised an error in that event.  Phew!  Guaranteeing this success was the first big step in the proof of <a class="knowl" acro="KNSI" type="Theorem" title="Kernel and Null Space Isomorphism" knowl="./knowls/theorem.KNSI.knowl">Theorem KNSI</a>.  Notice that the matrix representation of the restriction is a $3\times 3$ matrix, since the restriction runs between a domain and codomain that each have dimension 3.  These two vector spaces (the domain and codomain of the restriction) have dimension 3 but still contain vectors with 5 entries in their un-coordinatized versions.</p>

<p>The next two steps of the proof show that the restriction is injective (easy in the proof) and surjective (hard in the proof).  In Sage, here is the second success,</p>

<br><br><div class="sage-LTR"><script type="text/x-sage">rho_restrict.is_injective()
</script></div>

<br><br><div class="sage-LTR"><script type="text/x-sage">rho_restrict.is_surjective()
</script></div>

<p>Verified as invertible, <span class="code">rho_restrict</span> qualifies as an isomorphism between the linear transformation kernel, <span class="code">K</span>, and the matrix representation null space, <span class="code">MK</span>.  Only an example, but still very nice.  Your turn — can you create a verfication of <a class="knowl" acro="RCSI" type="Theorem" title="Range and Column Space Isomorphism" knowl="./knowls/theorem.RCSI.knowl">Theorem RCSI</a> (for this example, or some other nontrivial example you might create yourself)?</p>

<br><br><div class="sage-LTR sagecell-practice"><script type="text/x-sage"># Sage practice area
</script></div>
